{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","newQuery","newStatus","filterReducer","amount","query","status","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","emptyMassive","dispatch","className","map","id","completed","classNames","title","onClick","todoActions","setCurrentTodo","TodoFilter","onSubmit","event","preventDefault","onChange","e","target","value","filterActions","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userId","useState","user","setUser","currentUser","catch","href","email","name","App","loading","setLoading","setEmptyMassive","fetchTodos","newTodos","todosActions","setTodos","finally","useEffect","formattedQuery","trim","toLowerCase","filteredTodos","useMemo","findQuery","queryToSearch","includes","activeTodos","completedTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f2c12a4.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveAction = { type: 'currentTodo/REMOVE' };\ntype SetAction = { type: 'currentTodo/SET', payload: Todo };\n\nconst removeTodo = (): RemoveAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetAction | RemoveAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type Set = {\n  type: 'setQuery',\n  payload: string,\n};\n\ntype Clear = {\n  type: 'clearQuery',\n};\n\ntype Status = {\n  type: 'setStatus',\n  payload: string,\n};\n\nconst setQuery = (newQuery: string): Set => ({\n  type: 'setQuery',\n  payload: newQuery,\n});\n\nconst clearQuery = (): Clear => ({ type: 'clearQuery' });\nconst setStatus = (newStatus: string): Status => ({\n  type: 'setStatus',\n  payload: newStatus,\n});\n\ntype Action = Set\n| Clear\n| Status;\n\nexport const actions = { setQuery, clearQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: string,\n};\n\nconst filterReducer = (\n  amount: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'setQuery':\n      return {\n        ...amount,\n        query: action.payload,\n      };\n\n    case 'clearQuery':\n      return {\n        ...amount,\n        query: '',\n      };\n\n    case 'setStatus':\n      return {\n        ...amount,\n        status: action.payload,\n      };\n\n    default: return amount;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'setTodos', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'setTodos',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodos;\n\nconst todosReducer = (state = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'setTodos':\n      return action.payload;\n\n    default: return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  todos: Todo[],\n  emptyMassive: boolean,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, emptyMassive }) => {\n  const dispatch = useAppDispatch();\n\n  const setCurrentTodo = (todo: Todo) => dispatch(todoActions.setTodo(todo));\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <>\n      {emptyMassive ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map((todo) => (\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setCurrentTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames(\n                          'far',\n                          currentTodo?.id === todo.id ? 'fa-eye-slash' : 'fa-eye',\n                        )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const setQuery = (newQuery: string) => (\n    dispatch(filterActions.setQuery(newQuery)));\n\n  const clearQuery = () => dispatch(filterActions.clearQuery());\n\n  const setStatus = (status: string) => (\n    dispatch(filterActions.setStatus(status)));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => setStatus(e.target.value)}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable jsx-a11y/control-has-associated-label */}\n          {query.length > 0 && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState } from 'react';\nimport { Loader } from '../Loader';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const removeTodo = () => dispatch(todoActions.removeTodo());\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  getUser(currentTodo?.userId || 0)\n    .then((currentUser) => setUser(currentUser))\n    .catch();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      { user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo?.completed ? (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) : (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [emptyMassive, setEmptyMassive] = useState<boolean>(false);\n\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const setTodos = (newTodos: Todo[]) => dispatch(todosActions.setTodos(newTodos));\n\n  const fetchTodos = () => {\n    setLoading(true);\n\n    getTodos()\n      .then((newTodos) => {\n        if (newTodos.length) {\n          setTodos(newTodos);\n          setEmptyMassive(false);\n        } else {\n          setEmptyMassive(true);\n        }\n      })\n      .catch()\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const formattedQuery = useAppSelector(state => (\n    state.filter.query.trim().toLowerCase()));\n\n  const status = useAppSelector(state => state.filter.status);\n\n  const filter = (type: string) => {\n    const findQuery = (queryToSearch: string, filteredTodos: Todo[]) => {\n      return filteredTodos.filter((todo) => (\n        todo.title.toLowerCase().includes(queryToSearch)\n      ));\n    };\n\n    switch (type) {\n      case Status.ALL:\n        return findQuery(formattedQuery, todos);\n\n      case Status.ACTIVE: {\n        const activeTodos = todos.filter((todo) => !todo.completed);\n\n        return findQuery(formattedQuery, activeTodos);\n      }\n\n      case Status.COMPLETED: {\n        const completedTodos = todos.filter((todo) => todo.completed);\n\n        return findQuery(formattedQuery, completedTodos);\n      }\n\n      default: return todos;\n    }\n  };\n\n  const filteredTodos = useMemo(() => {\n    return filter(status);\n  }, [status, todos, formattedQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              { loading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  emptyMassive={emptyMassive}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}